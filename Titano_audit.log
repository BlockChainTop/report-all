Warning: contracts/Titano.sol: Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.

Warning: contracts/Titano.sol:200:9: Warning: This declaration shadows an existing declaration.
        string memory name,
        ^----------------^
contracts/Titano.sol:209:5: The shadowed declaration is here:
    function name() public view returns (string memory) {
    ^ (Relevant source part starts here and spans across multiple lines).

Warning: contracts/Titano.sol:201:9: Warning: This declaration shadows an existing declaration.
        string memory symbol,
        ^------------------^
contracts/Titano.sol:213:5: The shadowed declaration is here:
    function symbol() public view returns (string memory) {
    ^ (Relevant source part starts here and spans across multiple lines).

Warning: contracts/Titano.sol:202:9: Warning: This declaration shadows an existing declaration.
        uint8 decimals
        ^------------^
contracts/Titano.sol:217:5: The shadowed declaration is here:
    function decimals() public view returns (uint8) {
    ^ (Relevant source part starts here and spans across multiple lines).


[91m
Titano.swapBack() (contracts/Titano.sol#558-622) sends eth to arbitrary user
	Dangerous calls:
	- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
	- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
[91m
Reentrancy in Titano._transferFrom(address,address,uint256) (contracts/Titano.sol#510-541):
	External calls:
	- swapBack() (contracts/Titano.sol#523)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (contracts/Titano.sol#580-586)
		- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
		- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
	External calls sending eth:
	- swapBack() (contracts/Titano.sol#523)
		- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
		- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
	State variables written after the call(s):
	- _gonBalances[sender] = _gonBalances[sender].sub(gonAmount) (contracts/Titano.sol#526)
	- _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived) (contracts/Titano.sol#531-533)
	- gonAmountReceived = takeFee(sender,recipient,gonAmount) (contracts/Titano.sol#528-530)
		- _gonBalances[address(this)] = _gonBalances[address(this)].add(feeAmount) (contracts/Titano.sol#633-635)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities[0m
[93m
Titano.swapBack() (contracts/Titano.sol#558-622) performs a multiplication on the result of a division:
	-contractTokenBalance = _gonBalances[address(this)].div(_gonsPerFragment) (contracts/Titano.sol#565-567)
	-amountToLiquify = contractTokenBalance.mul(dynamicLiquidityFee).div(totalFee).div(2) (contracts/Titano.sol#568-571)
Titano.setSwapBackSettings(bool,uint256,uint256) (contracts/Titano.sol#722-729) performs a multiplication on the result of a division:
	-gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num) (contracts/Titano.sol#728)
Titano.getLiquidityBacking(uint256) (contracts/Titano.sol#827-835) performs a multiplication on the result of a division:
	-liquidityBalance = _gonBalances[pair].div(_gonsPerFragment) (contracts/Titano.sol#832)
	-accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply()) (contracts/Titano.sol#833-834)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
[93m
Titano.swapBack() (contracts/Titano.sol#558-622) ignores return value by router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
[93m
Titano.swapBack().success (contracts/Titano.sol#601) is written in both
	(success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
	(success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
Titano.swapBack().success (contracts/Titano.sol#601) is written in both
	(success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
	success = false (contracts/Titano.sol#610)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#write-after-write[0m
[92m
ERC20Detailed.constructor(string,string,uint8).name (contracts/Titano.sol#200) shadows:
	- ERC20Detailed.name() (contracts/Titano.sol#209-211) (function)
ERC20Detailed.constructor(string,string,uint8).symbol (contracts/Titano.sol#201) shadows:
	- ERC20Detailed.symbol() (contracts/Titano.sol#213-215) (function)
ERC20Detailed.constructor(string,string,uint8).decimals (contracts/Titano.sol#202) shadows:
	- ERC20Detailed.decimals() (contracts/Titano.sol#217-219) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
[92m
Titano.mint(address,uint256) (contracts/Titano.sol#709-720) should emit an event for: 
	- _totalSupply = _totalSupply.add(uint256(amount)) (contracts/Titano.sol#710) 
	- _totalSupply = MAX_SUPPLY (contracts/Titano.sol#713) 
	- _gonsPerFragment = TOTAL_GONS.div(_totalSupply) (contracts/Titano.sol#716) 
Titano.setSwapBackSettings(bool,uint256,uint256) (contracts/Titano.sol#722-729) should emit an event for: 
	- gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num) (contracts/Titano.sol#728) 
Titano.setTargetLiquidity(uint256,uint256) (contracts/Titano.sol#746-749) should emit an event for: 
	- targetLiquidity = target (contracts/Titano.sol#747) 
	- targetLiquidityDenominator = accuracy (contracts/Titano.sol#748) 
Titano.setFees(uint256,uint256,uint256,uint256,uint256) (contracts/Titano.sol#790-804) should emit an event for: 
	- liquidityFee = _liquidityFee (contracts/Titano.sol#797) 
	- RiskFreeValue = _RiskFreeValue (contracts/Titano.sol#798) 
	- Treasury = _Treasury (contracts/Titano.sol#799) 
	- sellFee = _sellFee (contracts/Titano.sol#800) 
	- totalFee = liquidityFee.add(Treasury).add(RiskFreeValue) (contracts/Titano.sol#801) 
	- feeDenominator = _feeDenominator (contracts/Titano.sol#802) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic[0m
[92m
Titano.setFeeReceivers(address,address,address)._autoLiquidityReceiver (contracts/Titano.sol#781) lacks a zero-check on :
		- autoLiquidityReceiver = _autoLiquidityReceiver (contracts/Titano.sol#785)
Titano.setFeeReceivers(address,address,address)._TreasuryReceiver (contracts/Titano.sol#782) lacks a zero-check on :
		- TreasuryReceiver = _TreasuryReceiver (contracts/Titano.sol#786)
Titano.setFeeReceivers(address,address,address)._RiskFreeValueReceiver (contracts/Titano.sol#783) lacks a zero-check on :
		- RiskFreeValueReceiver = _RiskFreeValueReceiver (contracts/Titano.sol#787)
Titano.clearStuckBalance(uint256,address).adr (contracts/Titano.sol#806) lacks a zero-check on :
		- address(adr).transfer((amountETH * amountPercentage) / 100) (contracts/Titano.sol#808-810)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
[92m
Titano.swapBack() (contracts/Titano.sol#558-622) has external calls inside a loop: path[1] = router.WETH() (contracts/Titano.sol#576)
Titano.swapBack() (contracts/Titano.sol#558-622) has external calls inside a loop: router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (contracts/Titano.sol#580-586)
Titano.swapBack() (contracts/Titano.sol#558-622) has external calls inside a loop: (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
Titano.swapBack() (contracts/Titano.sol#558-622) has external calls inside a loop: (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
Titano.swapBack() (contracts/Titano.sol#558-622) has external calls inside a loop: router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
[92m
Reentrancy in Titano.constructor() (contracts/Titano.sol#407-432):
	External calls:
	- pair = IDEXFactory(router.factory()).createPair(router.WETH(),address(this)) (contracts/Titano.sol#410-413)
	State variables written after the call(s):
	- RiskFreeValueReceiver = 0x00dE99c90E8971D3E1c9cBA724381B537F6e88C1 (contracts/Titano.sol#417)
	- TreasuryReceiver = 0x4DD90D3cE962039A3c66d613207aC2d449dFa04F (contracts/Titano.sol#416)
	- _allowedFragments[address(this)][address(router)] = uint256(- 1) (contracts/Titano.sol#419)
	- _gonBalances[TreasuryReceiver] = TOTAL_GONS (contracts/Titano.sol#423)
	- _gonsPerFragment = TOTAL_GONS.div(_totalSupply) (contracts/Titano.sol#424)
	- _isFeeExempt[TreasuryReceiver] = true (contracts/Titano.sol#427)
	- _isFeeExempt[address(this)] = true (contracts/Titano.sol#428)
	- _transferOwnership(TreasuryReceiver) (contracts/Titano.sol#430)
		- _owner = newOwner (contracts/Titano.sol#329)
	- _totalSupply = INITIAL_FRAGMENTS_SUPPLY (contracts/Titano.sol#422)
	- autoLiquidityReceiver = 0xfa1D544D46c7c50d7B7d7D2e85915F1b129a9386 (contracts/Titano.sol#415)
	- initialDistributionFinished = false (contracts/Titano.sol#426)
	- pairContract = InterfaceLP(pair) (contracts/Titano.sol#420)
Reentrancy in Titano.mint(address,uint256) (contracts/Titano.sol#709-720):
	External calls:
	- pairContract.sync() (contracts/Titano.sol#717)
	State variables written after the call(s):
	- _gonBalances[recipient] = _gonBalances[recipient].add(amount) (contracts/Titano.sol#719)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
[92m
Reentrancy in Titano._transferFrom(address,address,uint256) (contracts/Titano.sol#510-541):
	External calls:
	- swapBack() (contracts/Titano.sol#523)
		- router.swapExactTokensForETHSupportingFeeOnTransferTokens(amountToSwap,0,path,address(this),block.timestamp) (contracts/Titano.sol#580-586)
		- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
		- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
	External calls sending eth:
	- swapBack() (contracts/Titano.sol#523)
		- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
		- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
		- router.addLiquidityETH{value: amountETHLiquidity}(address(this),amountToLiquify,0,0,autoLiquidityReceiver,block.timestamp) (contracts/Titano.sol#613-620)
	Event emitted after the call(s):
	- Transfer(sender,address(this),feeAmount.div(_gonsPerFragment)) (contracts/Titano.sol#636)
		- gonAmountReceived = takeFee(sender,recipient,gonAmount) (contracts/Titano.sol#528-530)
	- Transfer(sender,recipient,gonAmountReceived.div(_gonsPerFragment)) (contracts/Titano.sol#535-539)
Reentrancy in Titano.constructor() (contracts/Titano.sol#407-432):
	External calls:
	- pair = IDEXFactory(router.factory()).createPair(router.WETH(),address(this)) (contracts/Titano.sol#410-413)
	Event emitted after the call(s):
	- OwnershipTransferred(_owner,newOwner) (contracts/Titano.sol#328)
		- _transferOwnership(TreasuryReceiver) (contracts/Titano.sol#430)
	- Transfer(address(0x0),TreasuryReceiver,_totalSupply) (contracts/Titano.sol#431)
Reentrancy in Titano.rebase(uint256,int256) (contracts/Titano.sol#438-464):
	External calls:
	- pairContract.sync() (contracts/Titano.sol#460)
	Event emitted after the call(s):
	- LogRebase(epoch,_totalSupply) (contracts/Titano.sol#462)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
[92m
Titano.swapping() (contracts/Titano.sol#389-393) has costly operations inside a loop:
	- inSwap = true (contracts/Titano.sol#390)
Titano.swapping() (contracts/Titano.sol#389-393) has costly operations inside a loop:
	- inSwap = false (contracts/Titano.sol#392)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop[0m
[92m
SafeMath.mod(uint256,uint256) (contracts/Titano.sol#117-120) is never used and should be removed
SafeMathInt.abs(int256) (contracts/Titano.sol#33-36) is never used and should be removed
SafeMathInt.add(int256,int256) (contracts/Titano.sol#27-31) is never used and should be removed
SafeMathInt.div(int256,int256) (contracts/Titano.sol#15-19) is never used and should be removed
SafeMathInt.mul(int256,int256) (contracts/Titano.sol#7-13) is never used and should be removed
SafeMathInt.sub(int256,int256) (contracts/Titano.sol#21-25) is never used and should be removed
Titano.transferToAddressETH(address,uint256) (contracts/Titano.sol#821-825) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code[0m
[92m
Titano.totalFee (contracts/Titano.sol#369-370) is set pre-construction with a non-constant function or state variable:
	- liquidityFee.add(Treasury).add(RiskFreeValue)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#function-initializing-state[0m
[92m
Pragma version^0.7.4 (contracts/Titano.sol#1) allows old versions
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
[92m
Low level call in Titano.swapBack() (contracts/Titano.sol#558-622):
	- (success) = address(TreasuryReceiver).call{gas: 30000,value: amountETHTreasury}() (contracts/Titano.sol#601-604)
	- (success,None) = address(RiskFreeValueReceiver).call{gas: 30000,value: amountETHRiskFreeValue}() (contracts/Titano.sol#605-608)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
[92m
Function IDEXRouter.WETH() (contracts/Titano.sol#225) is not in mixedCase
Parameter Titano.updateBlacklist(address,bool)._user (contracts/Titano.sol#434) is not in mixedCase
Parameter Titano.updateBlacklist(address,bool)._flag (contracts/Titano.sol#434) is not in mixedCase
Parameter Titano.setLP(address)._address (contracts/Titano.sol#481) is not in mixedCase
Parameter Titano.checkFeeExempt(address)._addr (contracts/Titano.sol#689) is not in mixedCase
Parameter Titano.enableTransfer(address)._addr (contracts/Titano.sol#697) is not in mixedCase
Parameter Titano.setFeeExempt(address)._addr (contracts/Titano.sol#701) is not in mixedCase
Parameter Titano.setSwapBackSettings(bool,uint256,uint256)._enabled (contracts/Titano.sol#723) is not in mixedCase
Parameter Titano.setSwapBackSettings(bool,uint256,uint256)._num (contracts/Titano.sol#724) is not in mixedCase
Parameter Titano.setSwapBackSettings(bool,uint256,uint256)._denom (contracts/Titano.sol#725) is not in mixedCase
Parameter Titano.setFeeReceivers(address,address,address)._autoLiquidityReceiver (contracts/Titano.sol#781) is not in mixedCase
Parameter Titano.setFeeReceivers(address,address,address)._TreasuryReceiver (contracts/Titano.sol#782) is not in mixedCase
Parameter Titano.setFeeReceivers(address,address,address)._RiskFreeValueReceiver (contracts/Titano.sol#783) is not in mixedCase
Parameter Titano.setFees(uint256,uint256,uint256,uint256,uint256)._liquidityFee (contracts/Titano.sol#791) is not in mixedCase
Parameter Titano.setFees(uint256,uint256,uint256,uint256,uint256)._RiskFreeValue (contracts/Titano.sol#792) is not in mixedCase
Parameter Titano.setFees(uint256,uint256,uint256,uint256,uint256)._Treasury (contracts/Titano.sol#793) is not in mixedCase
Parameter Titano.setFees(uint256,uint256,uint256,uint256,uint256)._sellFee (contracts/Titano.sol#794) is not in mixedCase
Parameter Titano.setFees(uint256,uint256,uint256,uint256,uint256)._feeDenominator (contracts/Titano.sol#795) is not in mixedCase
Variable Titano._isFeeExempt (contracts/Titano.sol#344) is not in mixedCase
Variable Titano.Treasury (contracts/Titano.sol#366) is not in mixedCase
Variable Titano.RiskFreeValue (contracts/Titano.sol#367) is not in mixedCase
Variable Titano.DEAD (contracts/Titano.sol#373) is not in mixedCase
Variable Titano.ZERO (contracts/Titano.sol#374) is not in mixedCase
Variable Titano.TreasuryReceiver (contracts/Titano.sol#377) is not in mixedCase
Variable Titano.RiskFreeValueReceiver (contracts/Titano.sol#378) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
[92m
Variable IDEXRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/Titano.sol#230) is too similar to IDEXRouter.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/Titano.sol#231)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-are-too-similar[0m
[92m
Titano.slitherConstructorVariables() (contracts/Titano.sol#333-847) uses literals with too many digits:
	- DEAD = 0x000000000000000000000000000000000000dEaD (contracts/Titano.sol#373)
Titano.slitherConstructorVariables() (contracts/Titano.sol#333-847) uses literals with too many digits:
	- ZERO = 0x0000000000000000000000000000000000000000 (contracts/Titano.sol#374)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
[92m
SafeMathInt.MAX_INT256 (contracts/Titano.sol#5) is never used in SafeMathInt (contracts/Titano.sol#3-37)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable[0m
[92m
Titano.DEAD (contracts/Titano.sol#373) should be constant
Titano.ZERO (contracts/Titano.sol#374) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
[92m
renounceMinter() should be declared external:
	- MinterRole.renounceMinter() (contracts/Titano.sol#179-181)
name() should be declared external:
	- ERC20Detailed.name() (contracts/Titano.sol#209-211)
symbol() should be declared external:
	- ERC20Detailed.symbol() (contracts/Titano.sol#213-215)
decimals() should be declared external:
	- ERC20Detailed.decimals() (contracts/Titano.sol#217-219)
owner() should be declared external:
	- Ownable.owner() (contracts/Titano.sol#304-306)
renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (contracts/Titano.sol#317-320)
transferOwnership(address) should be declared external:
	- Ownable.transferOwnership(address) (contracts/Titano.sol#322-324)
updateBlacklist(address,bool) should be declared external:
	- Titano.updateBlacklist(address,bool) (contracts/Titano.sol#434-436)
addMinter(address) should be declared external:
	- Titano.addMinter(address) (contracts/Titano.sol#751-753)
removeMinter(address) should be declared external:
	- Titano.removeMinter(address) (contracts/Titano.sol#755-757)
rescueToken(address,uint256) should be declared external:
	- Titano.rescueToken(address,uint256) (contracts/Titano.sol#813-819)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
bsc:0xBA96731324dE188ebC1eD87ca74544dDEbC07D7f analyzed (11 contracts with 77 detectors), 83 result(s) found
